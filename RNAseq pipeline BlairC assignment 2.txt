ssh bchrist4@pbio381.uvm.edu
pw
export TMPDIR="/data/project_data/16S/tmptmpdir"
echo $TMPDIR
#run fast qc before and after cleaning
#data location
/data/project_data/RNAseq/rawdata/

#visualize the quality of the reads
cd /data/project_data/RNAseq/rawdata
fastqc FILENAME*.fq.gz --outdir=/data/project_data/RNAseq/fastqc/
#!/bin/bash   
 
# Below is a script to loop through the files in the /rawdata directory, identify matches,  
# and clean the fastq files, and direct output to /cleandata 
#this was already done for us
#should be found in /data/popgen/
 
cd /data/project_data/RNAseq/rawdata
#make a script

vim name.sh
#i -- insert mode, make a scrip 
 
for f1 in *_1.fq.gz  
 
do 

 f2=${f1%%_1.fq.gz}"_2.fq.gz"  
 
java -classpath /data/popgen/Trimmomatic-0.39/trimmomatic-0.39.jar org.usadellab.trimmomatic.TrimmomaticPE \
        #how many CPUs on server to use (out of 24)
        -threads 10 \
        -phred33 \
         "$f1" \
         "$f2" \
         /data/project_data/RNAseq/cleandata/"$f1"_left_clean_paired.fq \
         /data/project_data/RNAseq/cleandata/"$f1"_left_clean_unpaired.fq \
         /data/project_data/RNAseq/cleandata/"$f2"_right_clean_paired.fq \
         /data/project_data/RNAseq/cleandata/"$f2"_right_clean_unpaired.fq \
        ILLUMINACLIP:/data/popgen/Trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10 \
        LEADING:20 \
        TRAILING:20 \
        SLIDINGWINDOW:6:20 \
        MINLEN:36 
>> log.txt
 
done

#to exit insert mode 
#escape, shift : w, q, ! 

chmod u+x test.sh

ll *.html | wc -l

rm

fastqc AA_F11*.fq.qz --outdir=/data/project_data/RNAseq/fastqc/clean
#multiqc is just a visualization tool doesnt actually change anything
 
scp bchrist4@pbio381.uvm.edu:~/data/project_data/RNAseq/fastqc/clean/multiqc_report.html .

/data/popgen/trinityrnaseq-v2.13.2/Trinity --seqType fq \
--left AA_F0_Rep1_2_right_clean_paired.fq,AA_F0_Rep2_2_right_clean_paired.fq,AA_F0_Rep3_2_right_clean_paired.fq,AA_F11_Rep1_2_right_clean_paired.fq,AA_F11_Rep2_2_right_clean_paired.fq,AA_F11_Rep3_2_right_clean_paired.fq,AA_F2_Rep2_2_right_clean_paired.fq,AA_F2_Rep3_2_right_clean_paired.fq,AA_F4_Rep1_2_right_clean_paired.fq,AA_F4_Rep2_2_right_clean_paired.fq,AA_F4_Rep3_2_right_clean_paired.fq,AH_F0_Rep1_2_right_clean_paired.fq,AH_F0_Rep2_2_right_clean_paired.fq,AH_F0_Rep3_2_right_clean_paired.fq,AH_F2_Rep1_2_right_clean_paired.fq,AH_F2_Rep2_2_right_clean_paired.fq,AH_F2_Rep3_2_right_clean_paired.fq,AH_F4_Rep1_2_right_clean_paired.fq,AH_F4_Rep2_2_right_clean_paired.fq,AH_F4_Rep3_2_right_clean_paired.fq,HA_F0_Rep1_2_right_clean_paired.fq,HA_F0_Rep2_2_right_clean_paired.fq,HA_F0_Rep3_2_right_clean_paired.fq,HA_F2_Rep1_2_right_clean_paired.fq,HA_F2_Rep2_2_right_clean_paired.fq,HA_F2_Rep3_2_right_clean_paired.fq,HA_F4_Rep1_2_right_clean_paired.fq,HA_F4_Rep2_2_right_clean_paired.fq,HA_F4_Rep3_2_right_clean_paired.fq,HH_F0_Rep1_2_right_clean_paired.fq,HH_F0_Rep2_2_right_clean_paired.fq,HH_F0_Rep3_2_right_clean_paired.fq,HH_F11_Rep1_2_right_clean_paired.fq,HH_F11_Rep2_2_right_clean_paired.fq,HH_F11_Rep3_2_right_clean_paired.fq,HH_F4_Rep1_2_right_clean_paired.fq,HH_F4_Rep2_2_right_clean_paired.fq,HH_F4_Rep3_2_right_clean_paired.fq \
--right AA_F0_Rep1_1_left_clean_paired.fq,AA_F0_Rep2_1_left_clean_paired.fq,AA_F0_Rep3_1_left_clean_paired.fq,AA_F11_Rep1_1_left_clean_paired.fq,AA_F11_Rep2_1_left_clean_paired.fq,AA_F11_Rep3_1_left_clean_paired.fq,AA_F2_Rep2_1_left_clean_paired.fq,AA_F2_Rep3_1_left_clean_paired.fq,AA_F4_Rep1_1_left_clean_paired.fq,AA_F4_Rep2_1_left_clean_paired.fq,AA_F4_Rep3_1_left_clean_paired.fq,AH_F0_Rep1_1_left_clean_paired.fq,AH_F0_Rep2_1_left_clean_paired.fq,AH_F0_Rep3_1_left_clean_paired.fq,AH_F2_Rep1_1_left_clean_paired.fq,AH_F2_Rep2_1_left_clean_paired.fq,AH_F2_Rep3_1_left_clean_paired.fq,AH_F4_Rep1_1_left_clean_paired.fq,AH_F4_Rep2_1_left_clean_paired.fq,AH_F4_Rep3_1_left_clean_paired.fq,HA_F0_Rep1_1_left_clean_paired.fq,HA_F0_Rep2_1_left_clean_paired.fq,HA_F0_Rep3_1_left_clean_paired.fq,HA_F2_Rep1_1_left_clean_paired.fq,HA_F2_Rep2_1_left_clean_paired.fq,HA_F2_Rep3_1_left_clean_paired.fq,HA_F4_Rep1_1_left_clean_paired.fq,HA_F4_Rep2_1_left_clean_paired.fq,HA_F4_Rep3_1_left_clean_paired.fq,HH_F0_Rep1_1_left_clean_paired.fq,HH_F0_Rep2_1_left_clean_paired.fq,HH_F0_Rep3_1_left_clean_paired.fq,HH_F11_Rep1_1_left_clean_paired.fq,HH_F11_Rep2_1_left_clean_paired.fq,HH_F11_Rep3_1_left_clean_paired.fq,HH_F4_Rep1_1_left_clean_paired.fq,HH_F4_Rep2_1_left_clean_paired.fq,HH_F4_Rep3_1_left_clean_paired.fq \
--CPU 10 --max_memory 20G 

cd /data/project_data/RNAseq/assembly/
conda activate salmon

salmon index -t Bridger.fasta -i hudsonica_index -p 8

screen
conda activate salmon

#!/bin/bash
######
#
# quantify each sample with salmon
#
#######

# -i points to the index files already created
# -l A tells salmon that it should automatically determine the library type of the sequencing reads (e.g. stranded vs. unstranded etc.)
# -p 8 says uses 8 threads
# -o indicates the directory and name of output
# seqbias corrects for random hexamer priming
# gcbias corrects for gcbias, but only when present.

conda activate salmon

for i in $(ls /data/project_data/RNAseq/cleandata | grep '.fq.gz' | cut -f 1-3 -d "_"| uniq);
do

    echo "starting sample ${i}"
    #starting with only name of rep. need to pull out files

    read1=$(ls /data/project_data/RNAseq/cleandata | grep ${i} | grep '_1.qc.fq.gz')
    read2=$(ls /data/project_data/RNAseq/cleandata | grep ${i} | grep '_2.qc.fq.gz')

    salmon quant -i /data/project_data/RNAseq/assembly/hudsonica_index \
        -l A \
         -1 /data/project_data/RNAseq/cleandata/${read1} \
         -2 /data/project_data/RNAseq/cleandata/${read2} \
         -p 8  \
         --softclip \
         --seqBias \
         --gcBias \
         -o /data/project_data/RNAseq/salmon/transcripts_quant/${i}

    echo "sample ${i} done"

done

library(tximportData)
library(tximport)

#locate the directory containing the files. 
dir <- "/data/project_data/RNASeq/salmon/"
list.files(dir)

# read in table with sample ids
samples <- read.table("/data/project_data/RNASeq/salmon/hudsonica_samples.txt", header=TRUE)

# now point to quant files
all_files <- file.path(dir, samples$sample, "quant.sf")
names(all_files) <- samples$sample

# what would be used if linked transcripts to genes
#txi <- tximport(files, type = "salmon", tx2gene = tx2gene)
# to be able to run without tx2gene
txi <- tximport(all_files, type = "salmon", txOut=TRUE)  
names(txi)

head(txi$counts)

countsMatrix <- txi$counts
dim(countsMatrix)
# should be about 51,000 by 38

# To write out
write.table(countsMatrix, file = "AH_countsMatrix.txt", col.names = T, row.names = T, quote = F) 